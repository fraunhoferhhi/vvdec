name: CI build

on:
  push:
  pull_request:
  release:
    types:
      - created

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - {
              name: "Windows MSVC 64 Bit",
              os: windows-2019,
              environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
              generators: "Visual Studio 16 2019",
              msvc_arch: x64
            }
          - {
              name: "Windows MSVC 32 Bit",
              os: windows-2019,
              environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
              generators: "Visual Studio 16 2019",
              msvc_arch: Win32
            }
          - {
              name: "Windows MinGW",
              os: windows-2019,
              cc: "gcc",
              cxx: "g++",
              generators: "MinGW Makefiles"
            }
          - {
              name: "Ubuntu 18.04",
              os: ubuntu-18.04
            }
          - {
              name: "Ubuntu 20.04",
              os: ubuntu-20.04
            }
          - {
              name: "Mac OS Latest x86_64",
              os: macos-latest,
              osx_arch: x86_64
            }
          - {
              name: "Mac OS Latest arm64",
              os: macos-latest,
              osx_arch: arm64
            }
    env:
      CMAKE_GENERATOR: "${{ matrix.config.generators }}"
    steps:
    - uses: actions/checkout@v2
    - run: git fetch --prune --unshallow

    - name: Ubuntu/Mac/MinGW build
      if: ${{ !contains( matrix.config.generators, 'Visual Studio' ) }}
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release "-DCMAKE_OSX_ARCHITECTURES=${{ matrix.config.osx_arch }}"
        cmake --build . --config Release
        cd ../

    - name: MSVC build
      if: contains( matrix.config.generators, 'Visual Studio' )
      run: |
        mkdir build
        cd build
        cmake ..  -DCMAKE_BUILD_TYPE=Release -A "${{ matrix.config.msvc_arch }}"
        cmake --build . --config Release
        cd ../
      shell: cmd
    - name: Upload a Windows x64 Build Artifact
      if: contains( matrix.config.msvc_arch, 'x64' )
      uses: actions/upload-artifact@v3.0.0
      with:
        name: Windows x64 vvdec
        path: bin/release-static/vvdecapp.exe
    - name: Upload a Windows x86 Build Artifact
      if: contains( matrix.config.msvc_arch, 'Win32' )
      uses: actions/upload-artifact@v3.0.0
      with:
        name: Windows x86 vvdec
        path: bin/release-static/vvdecapp.exe
    - name: Upload a Windows MinGW Build Artifact
      if: contains( matrix.config.generators, 'MinGW Makefiles' )
      uses: actions/upload-artifact@v3.0.0
      with:
        name: Windows MinGW vvdec
        path: bin/release-static/vvdecapp.exe
    - name: Upload a Mac OS x64 Build Artifact
      if: contains( matrix.config.osx_arch, 'x86_64' )
      uses: actions/upload-artifact@v3.0.0
      with:
        name: Mac OS x64 vvdec
        path: bin/release-static/vvdecapp
    - name: Upload a Mac OS ARM Build Artifact
      if: contains( matrix.config.osx_arch, 'arm64' )
      uses: actions/upload-artifact@v3.0.0
      with:
        name: Mac OS ARM64 vvdec
        path: bin/release-static/vvdecapp
    - name: Upload a Ubuntu 18.04 Build Artifact
      if: contains( matrix.config.os, 'ubuntu-18.04' )
      uses: actions/upload-artifact@v3.0.0
      with:
        name: Ubuntu 18.04 vvdec
        path: bin/release-static/vvdecapp
    - name: Upload a Ubuntu 20.04 Build Artifact
      if: contains( matrix.config.os, 'ubuntu-20.04' )
      uses: actions/upload-artifact@v3.0.0
      with:
        name: Ubuntu 20.04 vvdec
        path: bin/release-static/vvdecapp
